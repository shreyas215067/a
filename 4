#include <stdio.h>
#define INFINITY 99
#define MAX 10

void dijkstra(int s, int n, int wt[MAX][MAX], int dist[MAX], int p[MAX]);
void printPaths(int s, int n, int dist[MAX], int p[MAX]);

int main() {
    int n, s;
    int wt[MAX][MAX], dist[MAX], p[MAX];

    printf("Enter the number of vertices in a graph: ");
    scanf("%d", &n);

    printf("Enter the weight matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &wt[i][j]);

    printf("Enter the source vertex: ");
    scanf("%d", &s);

    dijkstra(s, n, wt, dist, p);
    printPaths(s, n, dist, p);

    return 0;
}

void dijkstra(int s, int n, int wt[MAX][MAX], int dist[MAX], int p[MAX]) {
    int visit[MAX] = {0};

    for (int i = 0; i < n; i++) {
        dist[i] = wt[s][i];
        p[i] = (dist[i] != INFINITY && i != s) ? s : -1;
    }

    dist[s] = 0;
    visit[s] = 1;

    for (int step = 1; step < n; step++) {
        int minDist = INFINITY, u = -1;

        for (int i = 0; i < n; i++) {
            if (!visit[i] && dist[i] < minDist) {
                minDist = dist[i];
                u = i;
            }
        }

        if (u == -1) break;
        visit[u] = 1;

        for (int v = 0; v < n; v++) {
            if (!visit[v] && wt[u][v] != INFINITY && dist[u] + wt[u][v] < dist[v]) {
                dist[v] = dist[u] + wt[u][v];
                p[v] = u;
            }
        }
    }
}

void printPaths(int s, int n, int dist[MAX], int p[MAX]) {
    for (int i = 0; i < n; i++) {
        if (i != s) {
            printf("Vertex %d -> Length: %d Path: %d", i, dist[i], i);
            int t = p[i];
            while (t != -1) {
                printf(" <-- %d", t);
                t = p[t];
            }
            printf("\n");
        }
    }
